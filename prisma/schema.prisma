// prisma/schema.prisma
datasource db {
  provider = "sqlite"   // ou "mysql" | "sqlite" | "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  usuario_id Int     @id @default(autoincrement()) @map("usuario_id")
  nome       String
  email      String  @unique
  senha      String
  trash      Int     @default(0)

  @@map("usuarios")
}

model Cotacao {
  id               Int                 @id @default(autoincrement())
  // "cotacao_id" aparece no seu fillable; mantendo como identificador de negócio opcional/único
  cotacao_id       Int?                @unique
  orcamento_compra String?

  itens            ItemCotacao[]       // hasMany
  orcamentos       OrcamentoCotacao[]  // hasMany

  @@map("cotacoes")
}

model ItemCotacao {
  id             Int      @id @default(autoincrement())
  item_id        Int?     // id de negócio do item, não PK
  cotacao_id     Int
  cod            String?
  descricao      String?
  marca          String?
  ref_fornecedor String?
  unidade        String?
  quantidade     Int?     @default(0)
  valor_unitario Float?
  selecionado    Boolean  @default(false)

  cotacao        Cotacao  @relation(fields: [cotacao_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([cotacao_id])
  @@map("item_cotacoes")
}

model OrcamentoCotacao {
  id             Int      @id @default(autoincrement())
  orcamento_id   Int?     // id de negócio do orçamento, não PK
  cotacao_id     Int
  descricao      String?
  quantidade     Int?     @default(0)
  valor_unitario Float?
  fornecedor     String?
  observacao     String?
  selecionado    Boolean  @default(false)

  cotacao        Cotacao  @relation(fields: [cotacao_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([cotacao_id])
  @@map("orcamento_cotacaos")
}

model Checklist {
  id                       String          @id @default(cuid())
  osInterna                String?
  dataHoraEntrada          DateTime?
  observacoes              String?
  combustivelPercentual    Int?
  clienteNome              String?
  clienteDoc               String?
  clienteTel               String?
  clienteEnd               String?
  veiculoNome              String?
  veiculoPlaca             String?
  veiculoCor               String?
  veiculoKm                BigInt?         // RECOMENDADO para km grandes (opcional)
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt

  // NOVOS CAMPOS (assinam em base64)
  assinaturasclienteBase64   String?       
  assinaturasresponsavelBase64 String?     

  checklistItems           ChecklistItem[]
  avarias                  Avaria[]
}


model ChecklistItem {
  id          String     @id @default(cuid())
  checklistId String                                     // <- STRING
  item        String
  status      String
  checklist   Checklist  @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([checklistId])
}

model Avaria {
  id          String     @id @default(cuid())
  checklistId String                                     // <- STRING
  tipo        String?
  peca        String?
  observacoes String?
  posX        Float?
  posY        Float?
  posZ        Float?
  normX       Float?
  normY       Float?
  normZ       Float?
  fotoBase64  String?
  timestamp   DateTime?
  checklist   Checklist  @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([checklistId])
}

